//****************************************************
// Title: Design Project 4 "Hang man"
// Course: Computational Problem Solving CPET - 1
// Developer: Christian Aguilar
// Date: 4/24/19
// Description: Makes Hang man game
//****************************************************

#include <iostream>
#include <iomanip>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <fstream>

using namespace std;

int const SIZE = 8;
string filename = "results.txt";
ofstream outFile;

void hangman_gallows(int turns_loss) // Function that draws the gallows
{
	string gallows; // String for the gallows

	switch (turns_loss) // Switch based of the turns loss counter, if it increases then the program will output more of the gallows
	{
	case 0: // Start of the gallows
	{
		gallows = " + \n"
			" | \n"
			" | \n"
			" | \n"
			" | \n"
			" | \n"
			" | \n"
			" +-------+ ";
		cout << gallows << endl;
		break;
	}
	case 1: // Adds more if the person guessed wrong
	{
		gallows = " +----+ \n"
			" | \n"
			" | \n"
			" | \n"
			" | \n"
			" | \n"
			" | \n"
			" +-------+ ";
		cout << gallows << endl;
		break;
	}
	case 2: // Adds more if the person guessed wrong
	{
		gallows = " +----+ \n"
			" |    | \n"
			" | \n"
			" | \n"
			" | \n"
			" | \n"
			" | \n"
			" +-------+ ";
		cout << gallows << endl;
		break;
	}
	case 3: // Adds more if the person guessed wrong
	{
		gallows = " +----+ \n"
			" |    | \n"
			" |    O \n"
			" | \n"
			" | \n"
			" | \n"
			" | \n"
			" +-------+ ";
		cout << gallows << endl;
		break;
	}
	case 4: // Adds more if the person guessed wrong
	{
		gallows = " +----+ \n"
			" |    | \n"
			" |    O \n"
			" |    | \n"
			" |    | \n"
			" | \n"
			" | \n"
			" +-------+ ";
		cout << gallows << endl;
		break;
	}
	case 5: // Adds more if the person guessed wrong
	{
		gallows = " +----+ \n"
			" |    | \n"
			" |    O \n"
			" |  \\ | \n"
			" |    | \n"
			" | \n"
			" | \n"
			" +-------+ ";
		cout << gallows << endl;
		break;
	}
	case 6: // Adds more if the person guessed wrong
	{
		gallows = " +----+ \n"
			" |    | \n"
			" |    O \n"
			" |  \\ | / \n"
			" |    | \n"
			" | \n"
			" | \n"
			" +-------+ ";
		cout << gallows << endl;
		break;
	}
	case 7: // Adds more if the person guessed wrong
	{
		gallows = " +----+ \n"
			" |    | \n"
			" |    O \n"
			" |  \\ | / \n"
			" |    | \ \n"
			" |   /  \n"
			" | \n";
			//" +-------+ ";
		cout << gallows << endl;
		break;
	}
	case 8:// Adds more if the person guessed wrong for the last time and they will lose at this point and the program will end
	{
		gallows = " +----+ \n"
			" |    | \n"
			" |    O \n"
			" |  \\ | / \n"
			" |    | \n"
			" |   / \\ \n"
			" | \n"
			" +-------+ ";
		cout << gallows << endl << "Game over" << endl;
		break;
	}
	}

}
bool repeated_Letter(char entry,char guesses[]) // Function for repeated guesses
{
	bool repeat = false;

	for(int i=0; i < SIZE; i++) // Checks for repeat
	{

		if(guesses[i] == '_') // no repeat
		{
			guesses[i] = entry;
			repeat = false;
			break;
		}

		else if(guesses[i] != '_' && entry == guesses[i]) // repeat
		{
			repeat = true;
			break;
		}
	}
	return(repeat);
}



int main()
{
	int game = 0;
	int turns_loss = 0;
	int turns_win = 0;
	int again = 0;
	bool repeat;

	do // Start of the program, loop that will continuosly run if player wants to play again
	{
		srand(time(NULL)); // Used for random number generator
		int num_pick; // Used for number generator to decide which word will be picked
		string word;  // Used for the word that will be chose
		char lower[6]; // Used for the word that will be chosen
		char capital[6];
		char user_Choice; // User input
		char capital_Choice;
		char word_input[2][6] = { '*', '*', '*', '*' , '*' , '*',
			'_' ,  '_', '_', '_', '_', '_', }; // Characters for the display of the word
											   // cout << num_pick << endl; Was used to test to see if the program picked the right word based off the number

		ifstream inFile;
		char guesses[SIZE] = { '_', '_','_', '_','_','_','_','_'};
		outFile.open(filename.c_str());

		num_pick = (rand() % 30) + 1; // Randomly picks a word from the 30 words available
		inFile.open("words_3.txt"); // Opens the text file with the words

		if (inFile.fail()) // Makes sure the file is opened successfully
		{
			cout << "The file was not opened";
			exit(1);
		}

		for (int i = 0; i < num_pick; i++) // Runs a loop based off the random number
		{
			inFile >> word; // Takes in the words from that line. The final run is the word that will be used for the game

		}
		outFile << "The Chosen Word is: " << word << "\n";

		inFile.close(); // Closes the word file
						// cout << word << endl; Was used to test and make sure the word that was picked successfully

		cout << "Welcome to Hangman" << endl;
		do // Begins the game
		{
			//decision = toupper(decision)
			cout << "You have " << 8 - turns_loss << " turns left to win" << endl;
			hangman_gallows(turns_loss); // Calls the function that will display the gallows
			for (int x = 0; x < 2; x++) // This nested for loop will output the blank word lines
			{
				for (int y = 0; y < 6; y++)
				{
					cout << word_input[x][y];
				}
				cout << endl;
			}

			if (turns_win == 6) // Checks condition for if the player won
			{
				cout << "The word is :" << word << endl;
				outFile << "\nThe user successfully found the word." << endl ;
				cout << "You won!" << endl;
				break; // Breaks the loop
			}
			else if (turns_loss == 8) // Checks condition for if the player will lose
			{
				cout << "The word is :" << word << endl;
				outFile << "\nThe user failed to find the word."<< endl;
				cout << "Game over you lose" << endl;
				break; // Breaks the loop

			}
			cout << "Enter a single, lower or upper case character: " << endl;
			cin >> user_Choice; // Takes in the users letter

			capital_Choice = toupper(user_Choice); // Calls arrays
			repeat = repeated_Letter(user_Choice, guesses); // Calls repeat array

			for (int z = 0; z < word.length(); z++) // This for loop turns the word that was picked from a string into a set of characters
			{
				lower[z] = word[z];
				capital[z] = toupper(word[z]);
			}
			for(int i = 0; i < 6; i++)
			{
					if (user_Choice == lower[i] && repeat == false) // Checks if the users guess was the first letter in the word if so it then changes the * to that letter
					{
						word_input[0][i] = user_Choice;
						turns_win++; // Increases counter to show that the player won
						outFile << "\n The Character " << user_Choice << " Was found." << endl;
					}
					else if(capital_Choice == capital[i] && repeat == false)
					{
						word_input[0][i] = capital_Choice;
						turns_win++; // Increases counter to show that the player won
						outFile << "\n The Character " << capital_Choice << " Was found." << endl;
					}
					if(repeat == true) // if repeat dont increase counters
					{
						cout << " That letter has been selected already, Try Again please: " << user_Choice << endl;
						break;
					}
			}

			//wrong guess
			if(repeat == false && user_Choice != lower[5] && user_Choice != lower[4] && user_Choice != lower[3] && user_Choice != lower[2] && user_Choice != lower[1] && user_Choice != lower[0]) // This tells the program the player was wrong and will increase the loss counter thus displaying more of the gallows
			{
				cout << "That letter was not in the word" << endl;
				turns_loss++;
				outFile << "\n The Character " << user_Choice << " Was not found." << "The error count is " << turns_loss << "\n";
			}


		} while (again < 2);

		cout << "Would you like to run again? If yes enter a 1. If no enter a 3." << endl; /* Ask the user if they would like to run again
																						   if so a 1 is taken in thus repeating the program */
		cin >> game;
		if (game == 1)
		{
			turns_loss = 0; // Variables for the counters used to run and stop the program
			turns_win = 0;
			game = 0;
			again = 0;
		}
		if (game == 3)
		{
			break;
		}
		outFile.close();
	} while (game < 2);

	return(0); //End the program
}
